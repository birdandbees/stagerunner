% Generated by roxygen2 (4.1.0): do not edit by hand
% Please edit documentation in R/stagerunner_R6.R
\name{stageRunner_run}
\alias{stageRunner_run}
\title{Run the stages in a stageRunner object.}
\usage{
stageRunner_run(from = NULL, to = NULL, normalized = FALSE,
  verbose = FALSE, remember_flag = TRUE, mode = self$.mode, .depth = 1,
  ...)
}
\arguments{
\item{from}{an indexing parameter. Many forms are accepted, but the
easiest is the name of the stage. For example, if we have
\code{stageRunner$new(context, list(stage_one = some_fn, stage_two = some_other_fn))}
then using \code{run('stage_one')} will execute \code{some_fn}.
Additional indexing forms are logical (which stages to execute),
numeric (which stages to execute by indices), negative (all but the
given stages), character (as above), and nested forms of these.
The latter refers to instances of the following:
\code{stageRunner$new(context, list(stage_one =
  stageRunner$new(context, substage_one = some_fn, substage_two = other_fn),
  stage_two = another_fn))}.
Here, the following all execute only substage_two:
\code{run(list(list(FALSE, TRUE), FALSE))},
\code{run(list(list(1, 2)))},
\code{run('stage_one/substage_two')},
\code{run('one/two')},
\code{run(list(list('one', 'two')))},
\code{run(list(list('one', 2)))}
Notice that regular expressions are allowed for characters.
The default is \code{NULL}, which runs the whole sequences of stages.}

\item{to}{an indexing parameter. If \code{stage_key} refers to a single stage,
attempt to run from that stage to this stage (or, if this one comes first,
this stage to that stage). For example, if we have
   \code{stages = list(a = list(b = 1, c = 2), d = 3, e = list(f = 4, g = 5))}
where the numbers are some functions, and we call \code{run} with
\code{stage_key = 'a/c'} and \code{to = 'e/f'}, then we would execute
stages \code{"a/c", "d", "e/f"}.}

\item{normalized}{logical. A convenience recursion performance helper. If
\code{TRUE}, stageRunner will assume the \code{stage_key} argument is a}

\item{verbose}{logical. Whether or not to display pretty colored text
informing about stage progress.
nested list of logicals.}

\item{remember_flag}{logical. An internal argument used by \code{run}
recursively if the \code{stageRunner} object has the \code{remember}
field set to \code{TRUE}. If \code{remember_flag} is FALSE, \code{run}
will not attempt to restore the context from cache (e.g., if we are
executing five stages simultaneously with \code{remember = TRUE},
the first stage's context should be restored from cache but none
of the remaining stages should).}

\item{mode}{character. If \code{mode = 'head'}, then by default the
\code{from} parameter will be used to execute that stage and that
stage only. If \code{mode = 'next'}, then the \code{from} parameter
will be used to run (by default, if \code{to} is left missing)
from the last successfully executed stage to the stage given by
\code{from}. If \code{from} occurs before the last successfully
executed stage (say S), the stages will be run from \code{from} to S.}

\item{.depth}{integer. Internal parameter for keeping track of nested running level.}

\item{...}{Any additional arguments to delegate to the \code{stageRunnerNode}
object that will execute its own \code{run} method.
(See \code{stageRunnerNode$run})}
}
\value{
TRUE or FALSE according as running the stages specified by the
  \code{stage_key} succeeded or failed.  If \code{remember = TRUE},
  this will instead be a list of the environment before and after
  executing the aforementioned stages. (This allows comparing what
  changes were made to the \code{context} during the execution of
  the stageRunner.
}
\description{
Run the stages in a stageRunner object.
}

